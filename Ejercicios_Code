Ejercicios Code Signal:

1. Ejercicio de la suma
	int add(param1, param2)
	{
	int resultado=0:
		return resultado=param1+param2; 
	}
	
2. Dado un año, regrese el siglo en el que está
	int centuryFromYear(int year)
	 {
	 return (int)((year - 1) / 100) + 1;
	}
3. Palabra palindroma
	boolean checkPalindrome(String inputString) 
	{
		 int n = inputString.length();
		for( int i = 0; i < n/2; i++ )
			if (inputString.charAt(i) != inputString.charAt(n-i-1)) 
				return false;
		return true; 
	}
4. Multiplicacion de numeros adyacentes
	int adjacentElementsProduct(int[] inputArray) {
	  int max = Integer.MIN_VALUE;
	  for(int i=0;i<inputArray.length-1;i++)
	  {
		if(inputArray[i]*inputArray[i+1]>max)
		{
		max = inputArray[i]*inputArray[i+1];
		}
	  }
	return max;
	}
	
5. Area del poligono find the area of a polygon for a given n
	int shapeArea(int n)
	{
		int area = 1;
		while (n > 1) 
		{
			area += (n-1)*4;
			n -=1;
		}
		return area;
	}
	
	
6. makeArrayConsecutive2(statues) estatuas faltantes
	int makeArrayConsecutive2(int[] statues) 
	{
		int max=0;
		int min=100;
		int resultado=0;
		for(int i=0; i < statues.length; i++)
		{
			if(statues[i]>max)
			{
				max = statues[i]; 
			}
			if(statues[i]<min)
			{
			   min=statues[i]; 
			}
			//return resultado= (max - statues.length) - 1;
		}
			   
		return resultado= (max - min) + 1 - statues.length;
	}
7. IncrementalSAXSource

boolean almostIncreasingSequence(int[] sequence) 
{
    boolean increase = true;
    List<Integer> list = new ArrayList<>();
    for (int a :sequence ) 
    {
        list.add(a); 
    }
    System.out.println(list);
    if(list.size()==1)
    {
        return false;
    }
    for (int i = 0;i < list.size()-1 ;i++ ) 
    {
        if (list.get(1)<=list.get(0)) 
        {
            list.remove(0);
            break;    
        }
        if(list.get(i+1)<=list.get(i)) 
        {
            if (list.get(i+1)>list.get(i-1)) 
            {
                list.remove(i); 
            }
            else
            {
                list.remove(i+1);
            }
            break;
        } 
    }

    for (int i =0;i<list.size()-1 ;i++ ) 
    {
        if (list.get(i+1)<list.get(i) || list.get(i+1)==list.get(i) ) 
        {
            increase = false;
        }    
    }
    return increase;
}

--------------------------------------------------

	static boolean almostIncreasingSequence(int[] sequence) {
		boolean entra = false;
		for (int i = 0; i < sequence.length; i++) {
			for (int j = 0; j < sequence.length; j++) {
				if (j == sequence.length - 1) {
					entra = true;
				}
				if (j == i) {
					continue;
				}
				if (j + 1 < sequence.length) {
					if (j + 1 == i) {
						if (j + 2 < sequence.length)
							if (sequence[j] >= sequence[j + 2]) {
								break;
							}
					} else if (sequence[j] >= sequence[j + 1]) {
						break;
					}
				}
			}
		}

		return entra;
	}
8. Suma de elementos de una matriz
int matrixElementsSum(int[][] matrix) {
		   int resultado=0;
		     for (int i = 0; i < matrix[0].length; i++) 
		     {
		         for (int j = 0; j < matrix.length; j++) 
		            {
		               if(matrix[j][i]==0)
		               {
		                
		                break;
		               }
		               resultado+= matrix[j][i];
		            }
		        
		        }
		   return resultado;
		    
		}
9. Dado un conjunto de cadenas, devuelva otra matriz que contenga todas sus cadenas más largas

String[] allLongestStrings(String[] inputArray)
{
   int maximo=0;
   ArrayList<String> Array = new ArrayList<String>();
   for(int i =0; i < inputArray.length; i++) 
   {
     maximo=Math.max(maximo,inputArray[i].length());
     
   }
    for(int i =0; i < inputArray.length; i++) 
    {
       if(inputArray[i].length() == maximo)
       {
          Array.add(inputArray[i]);
       }
    }
   String [] res = new String[Array.size()];
   return Array.toArray(res);
      
}
10. Dadas dos cadenas, encuentra el número de caracteres comunes entre ellas.
int commonCharacterCount(String s1, String s2) 
{
    int contador=0;
    int [] a1 = new int [26];
    int [] a2 = new int [26];
    
    for(int i=0; i < s1.length(); i++)
    {
       a1[s1.charAt(i)-'a']++;
    }
    for(int i=0; i < s2.length(); i++)
    {
       a2[s2.charAt(i)-'a']++;
    }
    for(int i=0; i < 26; i++)
    {
       contador+=Math.min(a1[i],a2[i]);
    }
    
    return contador;
    
}

11. 

public static boolean isLucky(int n) {
	    String enteroString = Integer.toString(n);
	    int resultado1=0;
	    int resultado2=0;
	    for(int i=0; i< enteroString.length()/2; i++)
	    {
	        resultado1+= Integer.parseInt(String.valueOf(enteroString.charAt(i)));
	        resultado2+= Integer.parseInt(String.valueOf(enteroString.charAt(enteroString.length()-1-i)));
	       
	    }
	    return resultado1==resultado2 ? true:false; 
	}


12. 
Algunas personas están de pie en una fila en un parque. Hay árboles entre ellos que no se pueden mover.
 Tu tarea es reorganizar a las personas por sus alturas en un orden no descendente sin mover los árboles. ¡La gente puede ser muy alta!
If a[i] = -1, then the ith position is occupied by a tree. Otherwise a[i] is the height of a person standing in the ith position.

int[] sortByHeight(int[] a) {
	   ArrayList<Integer> aux= new ArrayList<>();
	   for(int i=0 ; i < a.length ; i++){
	   	  if(a[i]!= -1){
	   	  	aux.add(a[i]);
	   	  }
	   }
	   Collections.sort(aux);
	   
	   int j=0;
	  for(int i=0; i < a.length; i++){
	  	 if(a[i]!=-1){
	  	 	a[i]=aux.get(j);
	  	 	j++;
	  	 }
	  } 
    return a;
}


13. Multiplicacion de matrices 

public static int[][] multiplicación (int [][] A, int [][] B){

	int fil_m1 = A.length;
	int col_m1 = A[0].length;

	int fil_m2 = B.length;
	int col_m2 = B[0].length;

	if (col_m1 != fil_m2)
	  throw new RuntimeException("No se pueden multiplicar las matrices");

	int[][] multiplicacion = new int[fil_m1][col_m2];

	for (int x=0; x < multiplicacion.length; x++) {
	  for (int y=0; y < multiplicacion[x].length; y++) {
	    for (int z=0; z<col_m1; z++) {
	      multiplicacion [x][y] += A[x][z]*B[z][y]; 
	    }
	  }
	}
}

14. Calcular la media de una serie de números que se leen por teclado.

Programa Java que lea por teclado 10 números enteros y los guarde en un array. A continuación calcula y muestra por separado la media de los valores positivos y la de los valores negativos.

/*
 * Programa que lea por teclado 10 números enteros y los guarde en un array.
 * A continuación calcula y muestra la media de los valores positivos y la  de los valores negativos.
 */

import java.util.*;
public class Media1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int i;
        int pos = 0, neg = 0; //contadores de los números positivos y negativos
        int[] numeros = new int[10]; //array que contendrá los números leídos por teclado
        double sumaPos = 0, sumaNeg = 0; //acumuladores para las sumas de positivos y negativos
        
        //lectura de datos y llenar el array
        System.out.println("Lectura de los elementos del array: ");
        for (i = 0; i < 10; i++) {
            System.out.print("numeros[" + i + "]= ");
            numeros[i]=sc.nextInt();
        }

        //recorrer el array para sumar por separado los números positivos 
         // y los negativos  
        for (i = 0; i < 10; i++) {
            if (numeros[i] > 0){ //sumar positivos
                sumaPos += numeros[i];
                pos++;
            } else if (numeros[i] < 0){ //sumar negativos
                sumaNeg += numeros[i];
                neg++;
            }
        }

        //Calcular y mostrar las medias 
        if (pos != 0) {
            System.out.println("Media de los valores positivos: " + sumaPos / pos);
        } else {
            System.out.println("No ha introducido numeros positivos");
        }
        if (neg != 0) {
            System.out.println("Media de los valores negativos: " + sumaNeg / neg);
        } else {
            System.out.println("No ha introducido numeros negativos");
        }
    }
}



15. Programa Java que lea 10 números enteros por teclado y los guarde en un array. Calcula y muestra la media de los números que estén en las posiciones pares del array.

Considera la primera posición del array (posición 0) como par.

/* 
 * Leer 10 números enteros y guardarlos
 * en un array. Calcular la media de los
 * que estén en las posiciones pares.
 */
import java.util.*;

public class Arrays1_2 {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int i;
        int[] numeros = new int[10];
        double media = 0;

        //lectura de datos y llenar el array
        System.out.println("Lectura de los elementos del array: ");
        for (i = 0; i < 10; i++) {
            System.out.print("numeros[" + i + "]= ");
            numeros[i] = sc.nextInt();
        }
        
        //Recorrer el array y calcular la media
        for (i = 0; i < 10; i++) {
            if (i % 2 == 0){ //si la posición actual es par
                media = media + numeros[i]; //se suma el valor de esa posición 
            }
        }
        //Calcular y mostrar la media
        System.out.println("Media de los valores que se encuentran en posiciones pares: "+ media/5);
    }
}


16. Mostrar las unidades de disco del sistema

import java.io.File;
public class EjercicioFileUnidades {
    public static void main(String[] args) {
        File [] unidades = File.listRoots();
        System.out.printf("   %20s %20s %n" , "Tamaño Total", "Tamaño disponible");
        for(File f : unidades){
            System.out.print(f);
            System.out.printf("%20s %20s %n", f.getTotalSpace(), f.getFreeSpace());
        }
    }
}


17. Contar el número de veces que aparece un carácter en un texto en Java


/Programa que cuenta el número de palabras de un texto.
import java.util.Scanner;
import java.util.StringTokenizer;
public class ContarPalabras {
    public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       String frase;
       System.out.print("Introduce una frase: ");
       frase = sc.nextLine();
       StringTokenizer st = new StringTokenizer(frase);
       System.out.println("Número de palabras: " + st.countTokens());
    }
}

//Método que recibe un String y devuelve el número de palabras que contiene
public static int contarPalabras(String s) {
    int contador = 1, pos;
    s = s.trim(); //eliminar los posibles espacios en blanco al principio y al final
    if (s.isEmpty()) { //si la cadena está vacía
        contador = 0;
    } else {
                pos = s.indexOf(" "); //se busca el primer espacio en blanco
                while (pos != -1) { //mientras que se encuentre un espacio en blanco
                           contador++; //se cuenta una palabra
                           pos = s.indexOf(" ", pos + 1); //se busca el siguiente espacio en blanco
                }                                               //a continuación del actual
    }
    return contador;
}


18. Eliminar la última palabra de un String en Java


public static String eliminarUltimaPalabra(String s) {
    int pos;
    s = s.trim();
    pos = s.lastIndexOf(" ");
    if (pos != -1) {
         s = s.substring(0, pos);
    } else {
         s = "";
    }
    return s;
}

// Un método main para probarlo podría ser este:

public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String texto;
    do {
           System.out.println("Introduce texto: ");
           texto = sc.nextLine();
     } while (texto.isEmpty());
     texto = eliminarUltimaPalabra(texto);
     System.out.println(texto);
}
















